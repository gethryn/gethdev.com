.container
	.hero-unit
		%h1
			Using ErlangC in Excel

	.row
		.span12
			%h2
				Erlang C Explained
			%p
				For even the most capable users of Excel, trying to implement worksheets using ErlangC to develop staffing models remains beyond their reach.  This brief tutorial explains how ErlangC works and how to translate it into Excel.
			%p
				The basis of ErlangC is a statistical distribution, known as the 
				%a{:href => 'http://en.wikipedia.org/wiki/Poisson_distribution'} Poisson Distribution
				, which expresses the probability of a given number of events (e.g. calls) occurring in a fixed interval (e.g. 30 mins) if these events are unrelated to each other (each call is different) and we know the average rate at which these events occur (e.g., 20 calls lasting 3 mins each tend to arrive in a 30 min interval).
			%p
				There are two calculations for computing Poisson values, which I will show below 
				%em (if the mere sight of such a mathematical monstrosity brings you out in hives, skip this next bit...). When we speak about
				%b agents' worth of calls 
				we figuring out how many calls one agent could take in an interval if the calls were a certain length and there were no breaks between calls.
	
	.row
		.span6
			%h3
				Poisson Probability Density Function
			%p
				i.e. The likelihood of 
				%strong exactly 
				15 agents' worth of calls coming in during an interval, when there is usually only enough calls for 10 agents. 
			%p
				%img{:src => '/images/poisson_pdf.png'}
			%p
				%strong lambda 
				(looks like upside-down y) refers the arrival rate (10).
			%p
				%strong k
				refers to the number we want to test against that rate (15)
			%p
				%strong e
				is the base of the natural logarithm (&approx; 2.71828)
			%p
				So for a normal rate of 10, getting exactly 15 agents' worth of calls in that interval can be calculated as:
			%img{:src => '/images/poisson_pdf_result.png'}
			%p
				or only about a 3% chance that 15 agents' worth of calls will arrive in an interval where we normally get around 10 agents' worth.
			%h4
				The EXCEL formula for Poisson Probability Density Function:
			%pre
				&= "=POISSON(15,10,0)"
		.span6
			%h3
				Poisson Cumulative Distribution Function
			%p
				i.e. The likelihood of 
				%strong up to
				15 agents' worth of calls coming in during an interval, when there is usually only enough calls for 10 agents. 
			%p
				%img{:src => '/images/poisson_cdf.png'}
			%p
			%p
				%strong lambda 
				(looks like upside-down y) refers the arrival rate (10).
			%p
				%strong k
				refers to the number we want to test against that rate (15)
			%p
				%strong e
				is the base of the natural logarithm (&approx; 2.71828)
			%p
				So for a normal rate of 10, getting &lt;=15 agents' worth of calls in that interval can be calculated as:
			%img{:src => '/images/poisson_cdf_result.png'}
			%p
				or about a 95% chance that less than 15 agents' worth of calls will arrive in an interval where we normally get around 10 agents' worth.
			%h4
				The EXCEL formula for Poisson Cumulative Distribution Function:
			%pre
				&= "=POISSON(15,10,1)"
	.row
		.span12
			%h2
				The ErlangC Formula
			%p
				Why on earth have we spent all this time on the Poisson Distribution?  Because it forms the basis for how to calculate ErlangC.  Observe the ErlangC formula which I have written in a slightly expanded state to illustrate this point.  Do you notice there are similarities to the formulas shown above?
			%p
				%img{:src => '/images/erlang_expanded.png'}
			%p
				The numerator of the Erlang C formula is just a Poisson Probability Density Function, as is the left hand side of the denominator.  The right hand side of the denominator is a Poisson Cumulative Distribution Function.  
			%p
				%img{:src => '/images/erlang_expanded_excel.png'}
			%p
				This is great news, as we can now represent this monster formula very simply in Excel.  The remainder of our task is performing fairly simple calculations in excel to determine the values of k, lambda. The letter rho (like an italic p) is simply shorthand for 
				%strong lambda / k.
			%h4
				The EXCEL formula for ErlangC:
			%pre
				&= "=POISSON(k,lambda,0)/(POISSON(k,lambda,0)+(1-rho)*POISSON(k-1,lambda,1))"
			%p
				"Great," you say, merrily plugging in our example numbers into the formula:
			%pre
				&= "=POISSON(15,10,0)/(POISSON(15,10,0)+(1-(10/15))*POISSON(15-1,10,1))"
			%p
				only to get the result
			%pre
				0.102042367
			%p
				%strong Now what?! 
				What you have calculated is exactly what ErlangC was designed to calculate: 
				%em the probability a call will have to wait in a queue before being answered.
				The value of 0.10 indicates that 10% of calls will probably have to wait in a queue before being answered, or conversely, that 90% of calls will be immediately answered.
			%h2 
				Build an ErlangC Staffing Calculator in Excel
			%p
				The trick now is to use this probability in the right way to calculate the things that matter to you for staffing (such as Service Level, Average Speed of Answer (ASA), Number of Agents Required, etc.).  To achieve this, we will walk through the creation of a simple spreadsheet.
	.row
		.span12
			%p
				We first enter the inputs.  All durations should be in seconds.
			%span{:class => 'geth_code'}
				%table{:class => 'table table-bordered', :cols => '6'}
					%tr
						%th #
						%th B
						%th C
						%th D
						%th E
						%th F
					%tr
						%th 1
						%th NCO
						%th Interval Length
						%th Call Length
						%th Number of Agents (k)
						%th Target ASA
					%tr
						%th 2
						%td 250
						%td 1800
						%td 240
						%td 1
						%td 20
					%tr
						%th 3
						%td =B2
						%td =C2
						%td =D2
						%td =E2+1
						%td =F2
					%tr
						%th 4
						%td =B3
						%td =C3
						%td =D3
						%td =E3+1
						%td =F3
					%tr
						%th ...
						%td ...
						%td ...
						%td ...
						%td ...
						%td ...
			%p
				Next, we calculate the intermediate values we will use to simplify future calculations; these include the ErlangC results. Add these items to the right of the inputs; be sure to keep the rows aligned.
			%span{:class => 'geth_code'}
				%table{:class => 'table table-bordered', :cols => '4'}
					%tr
						%th #
						%th G
						%th H
						%th I
					%tr
						%th 1
						%th Traffic Intensity (lambda)
						%th Occupancy (rho)
						%th ErlangC
					%tr
						%th 2
						%td =(B2/C2)*D2
						%td =G2/E2
						%td =POISSON(E2,G2,0)/(POISSON(E2,G2,0)+(1-H2)*POISSON(E2-1,G2,1))
					%tr
						%th 3
						%td =(B3/C3)*D3
						%td =G3/E3
						%td =POISSON(E3,G3,0)/(POISSON(E3,G3,0)+(1-H3)*POISSON(E3-1,G3,1))
					%tr
						%th 4
						%td =(B4/C4)*D4
						%td =G4/E4
						%td =POISSON(E4,G4,0)/(POISSON(E4,G4,0)+(1-H4)*POISSON(E4-1,G4,1))
					%tr
						%th ...
						%td ...
						%td ...
						%td ...
			%p
				Finally, present the values we are most interested in; all durations in seconds.  Add these items to the right of the previous items.
			%span{:class => 'geth_code'}
				%table{:class => 'table table-bordered', :cols => '5'}
					%tr
						%th #
						%th K
						%th L
						%th M
					%tr
						%th 1
						%th % Immediate Answer
						%th % Service Level Achieved
						%th ASA Acheived
					%tr
						%th 2
						%td =1-I2
						%td =1+I2*EXP(-(E2-G2)*F2/D2)
						%td =I2*D2/(E2*(1-H2))
					%tr
						%th 3
						%td =1-I3
						%td =1+I3*EXP(-(E3-G3)*F3/D3)
						%td =I3*D3/(E3*(1-H3))
					%tr
						%th 4
						%td =1-I4
						%td =1+I4*EXP(-(E4-G4)*F4/D4)
						%td =I4*D4/(E4*(1-H4))
					%tr
						%th ...
						%td ...
						%td ...
						%td ...
			%h2
				Finding Optimal Results in the Excel ErlangC Calculator
			%p
				To simplify these instructions, the model you've built above begins at one agent, and goes up incrementally for as many rows as you have in your spreadsheet.  In fact, a great many of these rows will be unnecessary in your staffing calculations.
			%ul
				%li
					Any rows where the number of agents (Column E) is less than the traffic intensity (Column G) can be discounted as this indicates there is more work than these agents can handle.
				%li
					Any rows where the Service Level exceeds 0.99 (99%) are over-servicing the call centre, and can also be discarded. Note, service levels are in decimal form. Format to a % style to view as a percentage.
				%li
					Excel has limitations on the size of these calculations.  In older versions, you may be limited to about 238 agents.  Also note that Excel has replaced the POISSON formula with a POISSON.DIST formula in later versions.  Both work in exactly the same way, so you may use whichever you wish.
			%p
				With the appropriate rows discarded, you can now assess those rows that are within useful limits.  To select the ideal number of agents, you need to compare the service level achieved and ASA achieved against your goals for the call centre.  For example, if your service level was to answer 80% of calls in 20 secs, you should select a number of agents from a row where the Service Level Achieved is &gt;=80% and where ASA Achieved is also &lt;= 20 secs, expressed as 80/20.
			%p
				Using the inputs shown in this example, we would see that with 250 calls lasting 240 secs each in a 30 min (1800 sec) interval, I would need 39 agents to achieve a service level of 80% answered in 20 seconds (80/20)
			%h2
				That's a lot of bother for just one interval!
			%p
				It is a lot of bother.  This is why products that perform staffing calculations are normally quite expensive.  You may be able to use the information on this tutorial to build more advanced formulas or macros to allow you to use this information more readily.  If the thought of doing this fills you with trepidation, you may be interested in purchasing one of our Excel Add-Ins.  These allow you to enter formulas for "Optimum Number of Agents," "ASA," "Service Level" (and many others) directly into cells without the need for these cumbersome calculation sheets.
			%p
				%a{:href => 'mailto:geth@gethdev.com'} Email me
				if you'd like to know more about these add ins.  We hope to have them available for download shortly.